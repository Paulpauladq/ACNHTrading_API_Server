scalar GraphQLDate

enum ListingStatus {
  New
  Closed
}

enum OfferStatus {
  New
  Rejected
  Accepted
}

type ListingPrice {
  productId: String!
  productCount: Int!
}

type Listing {
  _id: ID!
  id: Int!
  status: ListingStatus!
  sellerId: Int!
  productId: String!
  productCount: Int!
  created: GraphQLDate!
  expired: GraphQLDate
  note: String
  priceList: [ListingPrice!]!
}

type ListingListWithPages {
  listings: [Listing!]!
  pages: Int
}

type Offer {
  _id: ID!
  id: Int!
  status: OfferStatus!
  listingId: Int!
  sellerId: Int!
  buyerId: Int!
  productId: String!
  productCount: Int!
}

type OfferListWithPages {
  offers: [Offer!]!
  pages: Int
}

type User {
  _id: ID!
  id: Int!
  signedIn: Boolean!
  email: String!
  username: String
  switchId: String
  islandName: String
  villagerList: [String!]
  wishlist: [String!]
}

type UserListWithPages {
  offers: [User!]!
  pages: Int
}

"For Mutation"
input ListingPriceInputs {
  productId: String!
  productCount: Int!
}

input ListingInputs {
  sellerId: Int!
  productId: String!
  productCount: Int!
  expired: GraphQLDate
  note: String
  priceList: [ListingPriceInputs!]!
}

input ListingUpdateInputs {
  status: ListingStatus
  productId: String
  productCount: Int
  expired: GraphQLDate
  note: String
  priceList: [ListingPriceInputs!]
}

input OfferInputs {
  listingId: Int!
  sellerId: Int!
  buyerId: Int!
  productId: String!
  productCount: Int!
}

input OfferUpdateInputs {
  status: OfferStatus
  productId: String
  productCount: Int
}

input UserInputs {
  email: String!
  username: String
  switchId: String
  islandName: String
  villagerList: [String!]
  wishlist: [String!]
}

input UserUpdateInputs {
  username: String
  switchId: String
  islandName: String
  villagerList: [String!]
  wishlist: [String!]
}

"Data for Animal Crossing New Horizons"
type Item {
  _id: ID!
  uniqueEntryId: String!
  name: String!
  sourceSheet: String!
  image: String!
}

type ItemListWithPages {
  items: [Item!]!
  pages: Int
}

type Recipe {
  _id: ID!
  uniqueEntryId: String!
  name: String!
  category: String!
  image: String!
}

type RecipeListWithPages {
  recipes: [Recipe!]!
  pages: Int
}

type Villager {
  _id: ID!
  uniqueEntryId: String!
  name: String!
  personality: String!
  species: String!
  image: String!
}

type VillagerListWithPages {
  villagers: [Villager!]!
  pages: Int
}

type Nookmile {
  _id: ID!
  uniqueEntryId: String!
  name: String!
  category: String!
  image: String!
}

type NookmileListWithPages {
  nookmiles: [Nookmile!]!
  pages: Int
}

##### Top level declarations
type Query {
  about: String!
  listing: Listing!
  listingList(
    status: ListingStatus
    sellerId: Int
    productId: String
    created: GraphQLDate
    expired: GraphQLDate
  ): ListingListWithPages
  offer: Offer!
  offerList(
    status: OfferStatus
    listingId: Int
    sellerId: Int
    buyerId: Int
  ): ListingListWithPages
  user: User!
  userList(
    search: String
  ): UserListWithPages
  item: Item!
  itemList(
    sourceSheet: String
    search: String
  ): ItemListWithPages
  recipe: Recipe!
  recipeList(
    search: String
  ): RecipeListWithPages
  villager: Villager!
  villagerList(
    personality: String
    species: String
    search: String
  ): VillagerListWithPages
  nookmile: Nookmile!
  nookmileList(
    search: String
  ): NookmileListWithPages
}

type Mutation {
  lisingAdd(listing: ListingInputs!): Listing!
  lisingUpdate(id: Int!, changes: ListingUpdateInputs!): Listing!
  lisingDelete(id: Int!): Boolean!
  lisingRestore(id: Int!): Boolean!
  offerAdd(offer: OfferInputs!): Offer!
  offerUpdate(id: Int!, changes: OfferUpdateInputs!): Offer!
  offerDelete(id: Int!): Boolean!
  offerRestore(id: Int!): Boolean!
  userAdd(user: UserInputs!): User!
  userUpdate(id: Int!, changes: UserUpdateInputs!): User!
}
